{"version":3,"sources":["User.js","postsApi.js","store/postsReducer.js","UsersComment.js","Comments.js","Post.js","store/searchInputReducer.js","store/showingReducer.js","store/loadingReducer.js","store/index.js","PostsList.js","index.js"],"names":["User","_ref","user","react_default","a","createElement","Fragment","className","concat","name","email","address","city","street","suite","zipcode","defaultProps","getPosts","postData","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getUsers","userData","_context2","getComments","commentData","_context3","preparePosts","preparedPosts","type","postsReducer","state","arguments","length","undefined","action","filter","post","id","map","Object","objectSpread2","postComments","comment","UsersComment","commentProps","deleteComment","body","onClick","connect","dispatch","deleteCommentAction","Comments","comments","src_UsersComment","key","Post","postElems","deletePost","title","src_User","src_Comments","deletePostAction","searchInputReducer","searchTerm","eventValue","trim","toLowerCase","loadingReducer","getIsloading","isLoading","getisShown","isShown","getPostsWithComments","includes","reducer","combineReducers","showingReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","_ref2","posts","users","Promise","all","slicedToArray","find","person","userId","postId","inputChangeHandler","value","finishLoad","startLoad","finishShow","debouncedInputChangeHandler","f","delay","timer","_len","args","Array","_key","clearTimeout","setTimeout","apply","debounce","placeholder","onChange","e","target","src_Post","ReactDOM","render","es","src_PostsList","document","getElementById"],"mappings":"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","file":"static/js/main.f1ad47fb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n\n  <>\n    <p>\n      <span className=\"author__name\">{`Name: ${user.name}`}</span>\n      <span className=\"author__mail\">{`E-mail: ${user.email}`}</span>\n    </p>\n    <p>\n      <span className=\"author__address\">\n        {\n          `Address:\n         ${user.address.city}\n        ${user.address.street}\n        ${user.address.suite}`\n        }\n      </span>\n      <span className=\"author__zipcode\">\n        {`Zipcode:  ${user.address.zipcode}`}\n      </span>\n    </p>\n\n  </>\n);\n\nUser.propTypes = {\n  user: PropTypes.objectOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ])),\n};\nUser.defaultProps = { user: [] };\nexport default User;\n","const postsURL = 'https://jsonplaceholder.typicode.com/posts';\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\nconst commentsURL = 'https://jsonplaceholder.typicode.com/comments';\n\nexport const getPosts = async() => {\n  const postData = await fetch(postsURL);\n\n  return postData.json();\n};\n\nexport const getUsers = async() => {\n  const userData = await fetch(usersURL);\n\n  return userData.json();\n};\n\nexport const getComments = async() => {\n  const commentData = await fetch(commentsURL);\n\n  return commentData.json();\n};\n","import { getPosts, getUsers, getComments } from '../postsApi';\n\nconst PREPARE_POSTS = 'PREPARE_POSTS';\nconst DELETE_POST = 'DELETE_POST';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const preparePosts = preparedPosts => ({\n  type: PREPARE_POSTS,\n  preparedPosts,\n});\n\nexport const deletePost = id => ({\n  type: DELETE_POST,\n  id,\n});\nexport const deleteComment = id => ({\n  type: DELETE_COMMENT,\n  id,\n});\n\nexport const loadPreparedPosts = () => async(dispatch) => {\n  const [posts, users, comments] = await Promise.all(\n    [getPosts(), getUsers(), getComments()]\n  );\n\n  const preparedPosts = await posts.map((post) => {\n    const user = users.find(person => person.id === post.userId);\n    const postComments = comments.filter(comment => comment.postId === post.id);\n\n    return {\n      ...post,\n      user,\n      postComments,\n    };\n  });\n\n  dispatch(preparePosts(preparedPosts));\n};\n\nconst postsReducer = (state = [], action) => {\n  switch (action.type) {\n    case PREPARE_POSTS:\n      return action.preparedPosts;\n    case DELETE_POST:\n      return state\n        .filter(post => post.id !== action.id);\n    case DELETE_COMMENT:\n      return state\n        .map(post => ({\n          ...post,\n          postComments: post.postComments\n            .filter(comment => comment.id !== action.id),\n        }));\n    default: return state;\n  }\n};\n\nexport default postsReducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteComment as deleteCommentAction } from './store/postsReducer';\n\nconst UsersComment = ({ commentProps, deleteComment }) => (\n  <>\n    <section className=\"post__comments--body text\">\n      {commentProps.body}\n      <button\n        type=\"button\"\n        className=\"button button--delete\"\n        onClick={() => deleteComment(commentProps.id)}\n      >\n          DELETE\n      </button>\n    </section>\n    <section className=\"post__comments--author author\">\n      <div className=\"author--name\">\n        {` Name: ${commentProps.name}`}\n      </div>\n      <div className=\"author--email\">\n        {`E-mail: ${commentProps.email}`}\n      </div>\n    </section>\n  </>\n);\n\nUsersComment.propTypes = {\n  commentProps: PropTypes.objectOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n    PropTypes.array,\n  ])),\n  deleteComment: PropTypes.func.isRequired,\n};\nUsersComment.defaultProps = { commentProps: [] };\n\nconst mapDispatchToProps = dispatch => ({\n  deleteComment: id => dispatch(deleteCommentAction(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(UsersComment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport UsersComment from './UsersComment';\n\nconst Comments = ({ comments }) => (\n  <section className=\"post__comments\">\n    <h2 className=\"post__comments--title title\">Comments:</h2>\n    {comments.map(comment => (\n      <UsersComment commentProps={comment} key={comment.id} />\n    ))}\n    {\n      comments.length === 0 && (\n        <h3 className=\"post__comments--no-comment\">\n          No comments yet\n        </h3>\n      )\n    }\n  </section>\n);\n\nComments.propTypes = { comments: PropTypes.arrayOf(PropTypes.object) };\nComments.defaultProps = { comments: [] };\nexport default Comments;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport User from './User';\nimport Comments from './Comments';\nimport { deletePost as deletePostAction } from './store/postsReducer';\n\nconst Post = ({ postElems, deletePost }) => (\n  <>\n    <h1 className=\"post__title title\">\n      <button\n        type=\"button\"\n        className=\"button button--delete\"\n        onClick={() => deletePost(postElems.id)}\n      >\n          DELETE\n      </button>\n      {postElems.title}\n    </h1>\n    <section className=\"post__user author\">\n      <User user={postElems.user} />\n    </section>\n    <article className=\"post__body text\">\n      {postElems.body}\n    </article>\n    <Comments comments={postElems.postComments} />\n  </>\n);\n\nPost.propTypes = {\n  postElems: PropTypes.objectOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n    PropTypes.array,\n  ])),\n  deletePost: PropTypes.func.isRequired,\n};\nPost.defaultProps = { postElems: [] };\n\nconst mapDispatchToProps = dispatch => ({\n  deletePost: id => dispatch(deletePostAction(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Post);\n","const HANDLE_CHANGE = 'HANDLE_CHANGE';\nconst SET_SEARCH_TERM = 'SET_SEARCH_TERM';\n\nexport const handleChange = eventValue => ({\n  type: HANDLE_CHANGE,\n  eventValue,\n});\nexport const getSearchTermValue = searchTerm => ({\n  type: SET_SEARCH_TERM,\n  searchTerm,\n});\n\nconst searchInputReducer = (state = '', action) => {\n  switch (action.type) {\n    case SET_SEARCH_TERM:\n      return action.searchTerm;\n    case HANDLE_CHANGE:\n      return action.eventValue.trim().toLowerCase();\n    default: return state;\n  }\n};\n\nexport default searchInputReducer;\n","const FINISH_SHOWING = 'FINISH_SHOWING';\n\nexport const finishShowing = () => ({ type: FINISH_SHOWING });\n\nconst loadingReducer = (state = true, action) => {\n  switch (action.type) {\n    case FINISH_SHOWING:\n      return false;\n    default: return state;\n  }\n};\n\nexport default loadingReducer;\n","const START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst loadingReducer = (state = false, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n    default: return state;\n  }\n};\n\nexport default loadingReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport postsReducer from './postsReducer';\nimport loadingReducer from './loadingReducer';\nimport searchInputReducer from './searchInputReducer';\nimport showingReducer from './showingReducer';\n\nexport const getIsloading = state => state.isLoading;\nexport const getisShown = state => state.isShown;\nexport const getPostsWithComments = state => state.preparedPosts\n  .filter(post => post.title.toLowerCase()\n    .includes(state.searchTerm)\n|| post.body.toLowerCase()\n  .includes(state.searchTerm));\n\nconst reducer = combineReducers({\n  isLoading: loadingReducer,\n  isShown: showingReducer,\n  preparedPosts: postsReducer,\n  searchTerm: searchInputReducer,\n});\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Post from './Post';\nimport './App.css';\nimport { handleChange } from './store/searchInputReducer';\nimport { finishShowing } from './store/showingReducer';\nimport { finishLoading, startLoading } from './store/loadingReducer';\nimport { loadPreparedPosts } from './store/postsReducer';\nimport { getPostsWithComments, getIsloading, getisShown } from './store/index';\n\nconst PostsList = ({\n  isShown,\n  isLoading,\n  preparePosts,\n  inputChangeHandler,\n  startLoad,\n  finishShow,\n  finishLoad,\n  preparedPosts,\n}) => {\n  const getPreparedPosts = async() => {\n    startLoad();\n    await preparePosts();\n    finishLoad();\n    finishShow();\n  };\n  const debounce = (f, delay) => {\n    let timer;\n\n    return (...args) => {\n      clearTimeout(timer);\n      timer = setTimeout(() => f(...args), delay);\n    };\n  };\n\n  const debouncedInputChangeHandler = debounce(inputChangeHandler, 1000);\n\n  return (\n    <div className=\"App\">\n      {\n        isShown ? (\n          <button\n            type=\"button\"\n            className=\"button button--init\"\n            onClick={() => {\n              getPreparedPosts();\n            }}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        ) : (\n          <>\n            <input\n              type=\"text\"\n              className=\"post-list__searchInput\"\n              placeholder=\"Search\"\n              onChange={e => debouncedInputChangeHandler(e.target.value)}\n            />\n            <span className=\"post-list__post-count\">\n              {`${preparedPosts.length}\n                  ${preparedPosts.length === 1 ? 'post' : 'posts'} found`}\n            </span>\n            <article className=\"post-list\">\n\n              {preparedPosts.map(post => (\n                <section\n                  className=\"post-list__post\"\n                  key={post.id}\n                >\n                  <Post postElems={post} />\n                </section>\n              ))}\n            </article>\n          </>\n        )\n      }\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getIsloading(state),\n  isShown: getisShown(state),\n  preparedPosts: getPostsWithComments(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  preparePosts: () => dispatch(loadPreparedPosts()),\n  inputChangeHandler: value => dispatch(handleChange(value)),\n  finishLoad: () => dispatch(finishLoading()),\n  startLoad: () => dispatch(startLoading()),\n  finishShow: () => dispatch(finishShowing()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsList);\n\nPostsList.propTypes = {\n  isShown: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  inputChangeHandler: PropTypes.func.isRequired,\n  preparePosts: PropTypes.func.isRequired,\n  startLoad: PropTypes.func.isRequired,\n  finishLoad: PropTypes.func.isRequired,\n  finishShow: PropTypes.func.isRequired,\n  preparedPosts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport PostsList from './PostsList';\nimport store from './store/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PostsList />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}